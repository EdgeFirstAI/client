name: Test and Quality Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks and tests (combined - both use nightly)
  lint-and-test:
    name: Lint, Test, and Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt, llvm-tools-preview

      # Single cache for both linting and testing (both use nightly)
      - name: Cache Rust dependencies and build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          key: nightly-lint-test
          shared-key: "nightly"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features --locked

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up coverage environment
        run: |
          source <(cargo llvm-cov show-env --export-prefix --no-cfg-coverage --doctests)
          echo "RUSTFLAGS=$RUSTFLAGS" >> $GITHUB_ENV
          echo "RUSTDOCFLAGS=$RUSTDOCFLAGS" >> $GITHUB_ENV
          echo "LLVM_PROFILE_FILE=$LLVM_PROFILE_FILE" >> $GITHUB_ENV
          echo "CARGO_LLVM_COV=$CARGO_LLVM_COV" >> $GITHUB_ENV
          echo "CARGO_LLVM_COV_SHOW_ENV=$CARGO_LLVM_COV_SHOW_ENV" >> $GITHUB_ENV
          echo "CARGO_LLVM_COV_TARGET_DIR=$CARGO_LLVM_COV_TARGET_DIR" >> $GITHUB_ENV

      - name: Build with coverage
        run: cargo build --locked

      - name: Run Rust unit tests
        run: cargo nextest run --locked --no-fail-fast --profile ci
        env:
          STUDIO_SERVER: test
          STUDIO_USERNAME: ${{ secrets.STUDIO_USERNAME }}
          STUDIO_PASSWORD: ${{ secrets.STUDIO_PASSWORD }}

      - name: Run Rust doc tests
        run: cargo test --doc --locked
        env:
          STUDIO_SERVER: test
          STUDIO_USERNAME: ${{ secrets.STUDIO_USERNAME }}
          STUDIO_PASSWORD: ${{ secrets.STUDIO_PASSWORD }}

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Python package
        run: maturin build --locked -m crates/edgefirst-client-py/Cargo.toml

      - name: Install Python package
        run: pip install target/wheels/edgefirst_client-*.whl

      - name: Run Python tests
        run: python3 -m slipcover --xml --out coverage.xml -m xmlrunner discover -s . -p "test*.py" -o target/python

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            target/nextest/ci/junit.xml
            target/python/TEST-*.xml
          check_name: Test Results (Rust + Python)
          comment_title: EdgeFirst Client Test Results
          comment_mode: always
          fail_on: test failures
          action_fail: true
          action_fail_on_inconclusive: true
          job_summary: true
          compare_to_earlier_commit: true
          check_run_annotations: all tests, skipped tests

      - name: Generate coverage report
        run: cargo llvm-cov report --doctests --lcov --output-path lcov.info

      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          flags: rust
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: python
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            lcov.info
            coverage.xml

      - name: Generate workflow summary
        if: always()
        run: |
          echo "## 📊 Test & Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage" >> $GITHUB_STEP_SUMMARY
          echo "[![Codecov](https://codecov.io/gh/${{ github.repository }}/graph/badge.svg)](https://app.codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Quality (SonarCloud)" >> $GITHUB_STEP_SUMMARY
          echo "[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=${{ github.repository_owner }}_${{ github.event.repository.name }}&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=${{ github.repository_owner }}_${{ github.event.repository.name }}&metric=coverage)](https://sonarcloud.io/component_measures?metric=coverage&id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=${{ github.repository_owner }}_${{ github.event.repository.name }}&metric=bugs)](https://sonarcloud.io/project/issues?id=${{ github.repository_owner }}_${{ github.event.repository.name }}&types=BUG)" >> $GITHUB_STEP_SUMMARY
          echo "[![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=${{ github.repository_owner }}_${{ github.event.repository.name }}&metric=vulnerabilities)](https://sonarcloud.io/project/issues?id=${{ github.repository_owner }}_${{ github.event.repository.name }}&types=VULNERABILITY)" >> $GITHUB_STEP_SUMMARY
          echo "[![Code Smells](https://sonarcloud.io/api/project_badges/measure?project=${{ github.repository_owner }}_${{ github.event.repository.name }}&metric=code_smells)](https://sonarcloud.io/project/issues?id=${{ github.repository_owner }}_${{ github.event.repository.name }}&types=CODE_SMELL)" >> $GITHUB_STEP_SUMMARY
          echo "[![Technical Debt](https://sonarcloud.io/api/project_badges/measure?project=${{ github.repository_owner }}_${{ github.event.repository.name }}&metric=sqale_index)](https://sonarcloud.io/component_measures?metric=sqale_index&id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY

  # Security audit (uses stable rust to match distributed binaries)
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run cargo audit
        run: cargo audit

      - name: Generate security audit summary
        if: always()
        run: |
          echo "## 🔒 Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ No known vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Scanned with [cargo-audit](https://rustsec.org/) on stable Rust_" >> $GITHUB_STEP_SUMMARY

  # SonarCloud analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: SonarCloud Quality Gate check
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Generate SonarCloud summary
        if: always()
        run: |
          echo "## 🔍 SonarCloud Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Full Report →](https://sonarcloud.io/project/overview?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
