name: Test and Quality Checks

on:
  workflow_run:
    workflows: ["Dependencies"]
    types:
      - completed
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-git-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features --locked

      - name: Generate lint summary
        if: always()
        run: |
          echo "# Code Quality - Lint & Format ✨" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Formatting**: ✅ All code properly formatted" >> $GITHUB_STEP_SUMMARY
          echo "- **Clippy Lints**: ✅ No linting issues found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Tools Used" >> $GITHUB_STEP_SUMMARY
          echo "- \`cargo fmt\` - Code formatting" >> $GITHUB_STEP_SUMMARY
          echo "- \`cargo clippy\` - Rust linter" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Analysis completed on $(date)*" >> $GITHUB_STEP_SUMMARY

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run cargo audit
        run: cargo audit

      - name: Generate security audit summary
        if: always()
        run: |
          echo "# Security Audit 🔒" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Vulnerabilities**: ✅ No known vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies Checked**: All Cargo.lock dependencies scanned" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Tool Used" >> $GITHUB_STEP_SUMMARY
          echo "- \`cargo audit\` - Rust security vulnerability scanner" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: [RustSec Advisory Database](https://rustsec.org/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Security scan completed on $(date)*" >> $GITHUB_STEP_SUMMARY

  # Run tests with coverage
  test:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-

      - name: Set up coverage environment
        run: |
          # Source the environment setup to properly set variables in current shell
          source <(cargo llvm-cov show-env --export-prefix --no-cfg-coverage --doctests)
          # Then write them to GITHUB_ENV for subsequent steps
          echo "RUSTFLAGS=$RUSTFLAGS" >> $GITHUB_ENV
          echo "RUSTDOCFLAGS=$RUSTDOCFLAGS" >> $GITHUB_ENV
          echo "LLVM_PROFILE_FILE=$LLVM_PROFILE_FILE" >> $GITHUB_ENV
          echo "CARGO_LLVM_COV=$CARGO_LLVM_COV" >> $GITHUB_ENV
          echo "CARGO_LLVM_COV_SHOW_ENV=$CARGO_LLVM_COV_SHOW_ENV" >> $GITHUB_ENV
          echo "CARGO_LLVM_COV_TARGET_DIR=$CARGO_LLVM_COV_TARGET_DIR" >> $GITHUB_ENV
          echo "Coverage environment variables written to GITHUB_ENV"

      - name: Verify coverage environment
        run: |
          echo "Checking coverage environment variables:"
          echo "RUSTFLAGS: $RUSTFLAGS"
          echo "RUSTDOCFLAGS: $RUSTDOCFLAGS"
          echo "LLVM_PROFILE_FILE: $LLVM_PROFILE_FILE"
          echo "CARGO_LLVM_COV: $CARGO_LLVM_COV"
          echo "CARGO_LLVM_COV_TARGET_DIR: $CARGO_LLVM_COV_TARGET_DIR"

      - name: Build with coverage
        run: cargo build --locked

      - name: Run Rust unit tests
        run: cargo nextest run --locked --no-fail-fast --profile ci
        env:
          STUDIO_SERVER: test
          STUDIO_USERNAME: ${{ secrets.STUDIO_USERNAME }}
          STUDIO_PASSWORD: ${{ secrets.STUDIO_PASSWORD }}

      - name: Run Rust doc tests
        run: cargo test --doc --locked
        env:
          STUDIO_SERVER: test
          STUDIO_USERNAME: ${{ secrets.STUDIO_USERNAME }}
          STUDIO_PASSWORD: ${{ secrets.STUDIO_PASSWORD }}

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Install maturin
        run: pip install maturin

      - name: Build Python package
        run: maturin build --locked -m crates/edgefirst-client-py/Cargo.toml

      - name: Install Python package
        run: pip install target/wheels/edgefirst_client-*.whl

      - name: Install slipcover
        run: pip install slipcover

      - name: Install unittest-xml-reporting
        run: pip install unittest-xml-reporting

      - name: Run Python tests
        run: python3 -m slipcover --xml --out coverage.xml -m xmlrunner discover -s . -p "test*.py" -o target/python

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            target/nextest/ci/junit.xml
            target/python/TEST-*.xml
          check_name: Test Results (Rust + Python)
          comment_title: EdgeFirst Client Test Results
          comment_mode: create new
          fail_on: test failures
          action_fail: true
          action_fail_on_inconclusive: true
          job_summary: true
          compare_to_earlier_commit: true
          check_run_annotations: all tests, skipped tests

      - name: Check coverage files
        run: |
          echo "Checking for profraw files:"
          find target -name "*.profraw" -type f
          echo "Checking for coverage files:"
          ls -la coverage.xml || echo "coverage.xml not found"
          echo "Re-checking environment variables before report generation:"
          echo "LLVM_PROFILE_FILE: $LLVM_PROFILE_FILE"
          echo "CARGO_LLVM_COV_TARGET_DIR: $CARGO_LLVM_COV_TARGET_DIR"

      - name: Generate coverage report
        run: cargo llvm-cov report --doctests --lcov --output-path lcov.info

      - name: Verify coverage reports
        run: |
          echo "Verifying coverage reports were generated:"
          ls -lh lcov.info coverage.xml
          echo "lcov.info size: $(wc -l < lcov.info) lines"
          echo "coverage.xml size: $(wc -l < coverage.xml) lines"

      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          flags: rust
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: python
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            lcov.info
            coverage.xml

      - name: Generate workflow summary
        if: always()
        run: |
          echo "# EdgeFirst Client - Test & Quality Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract test statistics
          RUST_TESTS=$(grep -o 'test result:.*' target/nextest/ci/junit.xml || echo "N/A")
          PYTHON_TESTS=$(find target/python -name "TEST-*.xml" -exec grep -o 'tests="[0-9]*"' {} \; | head -1 | cut -d'"' -f2 || echo "0")
          
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Tests**: See detailed results in the action summary below" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Tests**: $PYTHON_TESTS tests executed" >> $GITHUB_STEP_SUMMARY
          echo "- **Combined Report**: Available in [Test Results (Rust + Python)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📈 Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- **📊 Codecov Dashboard**: [View Coverage Report](https://app.codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- **🦀 Rust Coverage**: [Codecov Rust Flag](https://app.codecov.io/gh/${{ github.repository }}?flag=rust)" >> $GITHUB_STEP_SUMMARY
          echo "- **🐍 Python Coverage**: [Codecov Python Flag](https://app.codecov.io/gh/${{ github.repository }}?flag=python)" >> $GITHUB_STEP_SUMMARY
          echo "- **📁 Artifacts**: [Download Raw Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔍 Code Quality" >> $GITHUB_STEP_SUMMARY
          echo "- **🎯 SonarCloud**: [View Quality Dashboard](https://sonarcloud.io/project/overview?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- **📋 Issues**: [View Issues](https://sonarcloud.io/project/issues?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- **🔒 Security**: [View Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- **✨ Clippy**: View lint job results above" >> $GITHUB_STEP_SUMMARY
          echo "- **🛡️ Security Audit**: View audit job results above" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "- **Pull Request**: View PR details in GitHub" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Report generated on $(date) - [EdgeFirst Client](https://github.com/${{ github.repository }})*" >> $GITHUB_STEP_SUMMARY

  # SonarCloud analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: SonarCloud Quality Gate check
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Generate SonarCloud summary
        if: always()
        run: |
          echo "# SonarCloud Analysis Complete 🔍" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Quality Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Report**: [View on SonarCloud](https://sonarcloud.io/project/overview?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Issues**: [View Issues](https://sonarcloud.io/project/issues?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Hotspots**: [View Security](https://sonarcloud.io/project/security_hotspots?id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage**: [View Coverage](https://sonarcloud.io/component_measures?metric=coverage&id=${{ github.repository_owner }}_${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "## Quality Gate Status" >> $GITHUB_STEP_SUMMARY
            echo "The quality gate check was executed for this pull request." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Analysis completed on $(date)*" >> $GITHUB_STEP_SUMMARY


