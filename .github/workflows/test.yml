name: Test and Quality Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_run:
    workflows: ["Dependencies"]
    types:
      - completed

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-git-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features --locked

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run cargo audit
        run: cargo audit

  # Run tests with coverage
  test:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-

      - name: Set up coverage environment
        run: |
          cargo llvm-cov show-env --no-cfg-coverage >> $GITHUB_ENV
          echo "Coverage environment variables written to GITHUB_ENV"

      - name: Verify coverage environment
        run: |
          echo "Checking coverage environment variables:"
          echo "RUSTFLAGS: $RUSTFLAGS"
          echo "RUSTDOCFLAGS: $RUSTDOCFLAGS"
          echo "LLVM_PROFILE_FILE: $LLVM_PROFILE_FILE"
          echo "CARGO_LLVM_COV: $CARGO_LLVM_COV"
          echo "CARGO_LLVM_COV_TARGET_DIR: $CARGO_LLVM_COV_TARGET_DIR"

      - name: Build with coverage
        run: cargo build --locked

      - name: Run Rust tests
        run: cargo test --locked -- --nocapture
        env:
          STUDIO_SERVER: test
          STUDIO_USERNAME: ${{ secrets.STUDIO_USERNAME }}
          STUDIO_PASSWORD: ${{ secrets.STUDIO_PASSWORD }}

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Install maturin
        run: pip install maturin

      - name: Build Python package
        run: maturin build --locked -m crates/edgefirst-client-py/Cargo.toml

      - name: Install Python package
        run: pip install target/wheels/edgefirst_client-*.whl

      - name: Install slipcover
        run: pip install slipcover

      - name: Run Python tests
        run: python3 -m slipcover --xml --out coverage.xml -m unittest

      - name: Check coverage files
        run: |
          echo "Checking for profraw files:"
          find target -name "*.profraw" -type f
          echo "Checking for coverage files:"
          ls -la coverage.xml || echo "coverage.xml not found"
          echo "Re-checking environment variables before report generation:"
          echo "LLVM_PROFILE_FILE: $LLVM_PROFILE_FILE"
          echo "CARGO_LLVM_COV_TARGET_DIR: $CARGO_LLVM_COV_TARGET_DIR"

      - name: Generate coverage report
        run: cargo llvm-cov report --lcov --output-path lcov.info

      - name: Verify coverage reports
        run: |
          echo "Verifying coverage reports were generated:"
          ls -lh lcov.info coverage.xml
          echo "lcov.info size: $(wc -l < lcov.info) lines"
          echo "coverage.xml size: $(wc -l < coverage.xml) lines"

      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          flags: rust
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: python
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            lcov.info
            coverage.xml

  # SonarCloud analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: SonarCloud Quality Gate check
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Run doc tests
  doc-test:
    name: Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-

      - name: Set up coverage environment
        run: |
          cargo llvm-cov show-env --no-cfg-coverage >> $GITHUB_ENV

      - name: Run doc tests
        run: cargo test --doc --locked

  # Test report generation
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    if: always()
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-

      - name: Set up coverage environment
        run: |
          cargo llvm-cov show-env --no-cfg-coverage >> $GITHUB_ENV

      - name: Run tests with nextest
        run: cargo nextest run --locked --no-fail-fast --profile ci
        env:
          STUDIO_SERVER: test
          STUDIO_USERNAME: ${{ secrets.STUDIO_USERNAME }}
          STUDIO_PASSWORD: ${{ secrets.STUDIO_PASSWORD }}

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: target/nextest/ci/junit.xml
          check_name: Test Results
