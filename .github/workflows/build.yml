name: Build CLI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  workflow_run:
    workflows: ["Dependencies"]
    types:
      - completed

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-linux-amd64

          # Linux aarch64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-linux-arm64

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-macos-amd64

          # macOS aarch64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-macos-arm64

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: edgefirst-client.exe
            asset_name: edgefirst-client-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-release-

      # Install zig and cargo-zigbuild for Linux targets (manylinux2014 compatibility)
      - name: Install zig and cargo-zigbuild (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install ziglang
          cargo install cargo-zigbuild

      - name: Build CLI (Linux with zig)
        if: matrix.os == 'ubuntu-latest'
        run: cargo zigbuild --release --locked --target ${{ matrix.target }}.2.17 -p edgefirst-cli

      - name: Build CLI (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --release --locked --target ${{ matrix.target }} -p edgefirst-cli

      - name: Rename binary
        shell: bash
        run: |
          mkdir -p artifacts
          # All targets use the same path structure
          cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "artifacts/${{ matrix.asset_name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}
          if-no-files-found: error

  # Verify all binaries were built successfully
  verify:
    name: Verify Builds
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          echo "Built artifacts:"
          ls -lR artifacts/
