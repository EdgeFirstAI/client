name: Build CLI and Python Wheels

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-cli:
    name: Build CLI - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-linux-amd64

          # Linux aarch64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-linux-arm64

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-macos-amd64

          # macOS aarch64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-macos-arm64

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: edgefirst-client.exe
            asset_name: edgefirst-client-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Use Swatinem/rust-cache for proper incremental compilation caching
      - name: Cache Rust dependencies and build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          # Shared cache key with Python wheels for maximum reuse
          key: ${{ matrix.target }}-build
          shared-key: "build"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      # Install zig and cargo-zigbuild for Linux targets (manylinux2014 compatibility)
      - name: Install zig and cargo-zigbuild (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install ziglang
          cargo install cargo-zigbuild

      - name: Build CLI (Linux with zig)
        if: matrix.os == 'ubuntu-latest'
        run: cargo zigbuild --release --locked --target ${{ matrix.target }}.2.17 -p edgefirst-cli

      - name: Build CLI (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --release --locked --target ${{ matrix.target }} -p edgefirst-cli

      - name: Rename binary
        shell: bash
        run: |
          mkdir -p artifacts
          # When --target is specified, cargo uses target/<triple>/release/
          # This applies to all builds since we always specify --target
          cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "artifacts/${{ matrix.asset_name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}
          if-no-files-found: error

  build-wheels:
    name: Build Python Wheel - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [build-cli]  # Run after CLI builds to benefit from shared cache
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x86_64

          # Linux aarch64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: aarch64

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            arch: x86_64

          # macOS aarch64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: aarch64

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Use same cache configuration as CLI builds for maximum reuse
      - name: Cache Rust dependencies and build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-build
          shared-key: "build"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install maturin
        run: pip install maturin[zig]

      # Install zig and cargo-zigbuild for Linux targets
      - name: Install zig and cargo-zigbuild (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install ziglang
          cargo install cargo-zigbuild

      # Install cross-compilation tools for Linux aarch64
      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      # Build wheels with zig for better cross-compilation support on Linux
      - name: Build wheels (Linux with zig)
        if: matrix.os == 'ubuntu-latest'
        run: |
          maturin build --release --locked --zig --compatibility manylinux2014 \
            --target ${{ matrix.target }} \
            -m crates/edgefirst-client-py/Cargo.toml

      # Build wheels for macOS
      - name: Build wheels (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          maturin build --release --locked \
            --target ${{ matrix.target }} \
            -m crates/edgefirst-client-py/Cargo.toml

      # Build wheels for Windows
      - name: Build wheels (Windows)
        if: matrix.os == 'windows-latest'
        run: maturin build --release --locked -m crates/edgefirst-client-py/Cargo.toml

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
          path: target/wheels/*.whl
          if-no-files-found: error

  # Verify all binaries and wheels were built successfully
  verify:
    name: Verify Builds
    runs-on: ubuntu-latest
    needs: [build-cli, build-wheels]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify artifacts
        run: |
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**CLI Binaries:**" >> $GITHUB_STEP_SUMMARY
          ls -1 artifacts/*client* 2>/dev/null | wc -l | xargs -I {} echo "- {} binaries built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Python Wheels:**" >> $GITHUB_STEP_SUMMARY
          find artifacts/wheels-* -name "*.whl" 2>/dev/null | wc -l | xargs -I {} echo "- {} wheels built" >> $GITHUB_STEP_SUMMARY
