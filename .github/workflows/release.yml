name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+rc[0-9]+'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify version matches tag
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_VERSION="${{ steps.get_version.outputs.version }}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Cargo.toml version ($CARGO_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
          echo "Version verified: $CARGO_VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## What's Changed

            See [CHANGELOG.md](https://github.com/EdgeFirstAI/client/blob/${{ steps.get_version.outputs.version }}/CHANGELOG.md) for details.

            ## Installation

            ### CLI Binary
            Download the appropriate binary for your platform from the assets below.

            _Alternatively, the pip package includes the CLI (see below)._

            ### Python Package
            ```bash
            pip install edgefirst-client==${{ steps.get_version.outputs.version }}
            ```

            ### Rust Crate
            ```toml
            [dependencies]
            edgefirst-client = "${{ steps.get_version.outputs.version }}"
            ```

  # Generate third-party licenses
  generate-licenses:
    name: Generate Third-Party Licenses
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Generate TSV license file
        run: |
          cargo-license --authors --all-features --tsv > THIRD_PARTY.tsv

      - name: Convert TSV to Markdown
        run: |
          cat > THIRD_PARTY.md << 'EOF'
          # Third-Party Licenses

          This file lists all third-party dependencies and their respective licenses.

          EOF
          
          # Convert TSV to markdown table
          awk -F'\t' '
          NR==1 {
            print "| " $1 " | " $2 " | " $3 " | " $4 " | " $5 " |"
            print "|---|---|---|---|---|"
          }
          NR>1 {
            # Escape pipe characters in fields
            gsub(/\|/, "\\|", $0)
            print "| " $1 " | " $2 " | " $3 " | " $4 " | " $5 " |"
          }
          ' THIRD_PARTY.tsv >> THIRD_PARTY.md

      - name: Upload THIRD_PARTY.md to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: THIRD_PARTY.md

  # Build CLI binaries
  build-cli:
    name: Build CLI ${{ matrix.target }}
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-linux-amd64

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-linux-arm64

          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-macos-amd64

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: edgefirst-client
            asset_name: edgefirst-client-macos-arm64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: edgefirst-client.exe
            asset_name: edgefirst-client-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Use same cache configuration as build.yml to benefit from shared cache
      - name: Cache Rust dependencies and build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-build
          shared-key: "build"
          save-if: "false"  # Don't save cache on release builds

      # Install zig and cargo-zigbuild for Linux targets (manylinux2014 compatibility)
      - name: Install zig and cargo-zigbuild (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install ziglang
          cargo install cargo-zigbuild

      - name: Build CLI (Linux with zig)
        if: matrix.os == 'ubuntu-latest'
        run: cargo zigbuild --release --locked --target ${{ matrix.target }}.2.17 -p edgefirst-cli

      - name: Build CLI (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --release --locked --target ${{ matrix.target }} -p edgefirst-cli

      # Verify GLIBC requirements for Linux binaries (manylinux2014 = glibc 2.17)
      - name: Verify GLIBC requirements (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "Checking GLIBC requirements for ${{ matrix.target }}..."
          GLIBC_MAX=$(objdump -T "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" | grep GLIBC | sed 's/.*GLIBC_/GLIBC_/' | sed 's/).*//' | sort -V | tail -1)
          echo "Maximum GLIBC version required: $GLIBC_MAX"
          
          # Extract version numbers for comparison
          GLIBC_MAJOR=$(echo $GLIBC_MAX | cut -d'_' -f2 | cut -d'.' -f1)
          GLIBC_MINOR=$(echo $GLIBC_MAX | cut -d'_' -f2 | cut -d'.' -f2)
          
          # Check if version is <= 2.17 (manylinux2014)
          if [ "$GLIBC_MAJOR" -gt 2 ] || ([ "$GLIBC_MAJOR" -eq 2 ] && [ "$GLIBC_MINOR" -gt 17 ]); then
            echo "❌ ERROR: Binary requires $GLIBC_MAX, but manylinux2014 only supports up to GLIBC_2.17"
            exit 1
          fi
          echo "✅ GLIBC requirements verified: $GLIBC_MAX <= GLIBC_2.17"

      - name: Create release asset
        shell: bash
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          mkdir -p release
          cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "release/${{ matrix.asset_name }}"
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "${{ matrix.asset_name }}-$VERSION.zip" "${{ matrix.asset_name }}"
          else
            tar czf "${{ matrix.asset_name }}-$VERSION.tar.gz" "${{ matrix.asset_name }}"
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: release/${{ matrix.asset_name }}-${{ needs.create-release.outputs.version }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}

  # Build Python wheels
  build-wheels:
    name: Build wheels ${{ matrix.platform }}-${{ matrix.arch }}
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x86_64

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: aarch64

          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            arch: x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: aarch64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Use same cache configuration as build.yml to benefit from shared cache
      - name: Cache Rust dependencies and build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-build
          shared-key: "build"
          save-if: "false"  # Don't save cache on release builds

      - name: Install maturin
        run: pip install maturin[zig]

      # Install zig and cargo-zigbuild for Linux targets
      - name: Install zig and cargo-zigbuild (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install ziglang
          cargo install cargo-zigbuild

      # Install cross-compilation tools for Linux aarch64
      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build CLI for bundling (Linux with zig)
        if: matrix.os == 'ubuntu-latest'
        run: cargo zigbuild --release --locked --target ${{ matrix.target }}.2.17 -p edgefirst-cli

      - name: Build CLI for bundling (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --release --locked --target ${{ matrix.target }} -p edgefirst-cli

      - name: Bundle CLI with wheel
        shell: bash
        run: |
          mkdir -p crates/edgefirst-client-py/edgefirst_client.data/scripts
          
          # When --target is specified, cargo uses target/<triple>/release/
          # This applies to all builds since we always specify --target
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/edgefirst-client.exe" "crates/edgefirst-client-py/edgefirst_client.data/scripts/edgefirst-client.exe"
          else
            cp "target/${{ matrix.target }}/release/edgefirst-client" "crates/edgefirst-client-py/edgefirst_client.data/scripts/edgefirst-client"
          fi

      # Verify GLIBC requirements for bundled CLI (Linux only, manylinux2014 = glibc 2.17)
      - name: Verify bundled CLI GLIBC requirements (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "Checking GLIBC requirements for bundled CLI binary (${{ matrix.target }})..."
          GLIBC_MAX=$(objdump -T "crates/edgefirst-client-py/edgefirst_client.data/scripts/edgefirst-client" | grep GLIBC | sed 's/.*GLIBC_/GLIBC_/' | sed 's/).*//' | sort -V | tail -1)
          echo "Maximum GLIBC version required: $GLIBC_MAX"
          
          # Extract version numbers for comparison
          GLIBC_MAJOR=$(echo $GLIBC_MAX | cut -d'_' -f2 | cut -d'.' -f1)
          GLIBC_MINOR=$(echo $GLIBC_MAX | cut -d'_' -f2 | cut -d'.' -f2)
          
          # Check if version is <= 2.17 (manylinux2014)
          if [ "$GLIBC_MAJOR" -gt 2 ] || ([ "$GLIBC_MAJOR" -eq 2 ] && [ "$GLIBC_MINOR" -gt 17 ]); then
            echo "❌ ERROR: Bundled CLI requires $GLIBC_MAX, but manylinux2014 only supports up to GLIBC_2.17"
            exit 1
          fi
          echo "✅ Bundled CLI GLIBC requirements verified: $GLIBC_MAX <= GLIBC_2.17"

      - name: Build wheels (Linux with zig)
        if: matrix.os == 'ubuntu-latest'
        run: |
          maturin build --release --locked --zig --compatibility manylinux2014 \
            --target ${{ matrix.target }} \
            -m crates/edgefirst-client-py/Cargo.toml

      - name: Build wheels (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          maturin build --release --locked \
            --target ${{ matrix.target }} \
            -m crates/edgefirst-client-py/Cargo.toml

      - name: Build wheels (Windows)
        if: matrix.os == 'windows-latest'
        run: maturin build --release --locked -m crates/edgefirst-client-py/Cargo.toml

      # Final verification of wheel contents (Linux only)
      - name: Verify wheel contents GLIBC requirements (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "Extracting and verifying final wheel contents for ${{ matrix.target }}..."
          WHEEL_FILE=$(ls target/wheels/*.whl)
          TEMP_DIR=$(mktemp -d)
          unzip -q "$WHEEL_FILE" -d "$TEMP_DIR"
          
          # Check the Python extension module (.so)
          SO_FILE=$(find "$TEMP_DIR" -name "*.so" | head -1)
          if [ -n "$SO_FILE" ]; then
            echo "Checking Python extension: $SO_FILE"
            GLIBC_MAX=$(objdump -T "$SO_FILE" | grep GLIBC | sed 's/.*GLIBC_/GLIBC_/' | sed 's/).*//' | sort -V | tail -1)
            echo "  Max GLIBC: $GLIBC_MAX"
            
            GLIBC_MAJOR=$(echo $GLIBC_MAX | cut -d'_' -f2 | cut -d'.' -f1)
            GLIBC_MINOR=$(echo $GLIBC_MAX | cut -d'_' -f2 | cut -d'.' -f2)
            
            if [ "$GLIBC_MAJOR" -gt 2 ] || ([ "$GLIBC_MAJOR" -eq 2 ] && [ "$GLIBC_MINOR" -gt 17 ]); then
              echo "❌ ERROR: Python extension requires $GLIBC_MAX"
              rm -rf "$TEMP_DIR"
              exit 1
            fi
            echo "  ✅ Python extension OK"
          fi
          
          # Check bundled CLI binary
          CLI_FILE=$(find "$TEMP_DIR" -path "*.data/scripts/edgefirst-client" -type f | head -1)
          if [ -n "$CLI_FILE" ]; then
            echo "Checking bundled CLI: $CLI_FILE"
            GLIBC_MAX=$(objdump -T "$CLI_FILE" | grep GLIBC | sed 's/.*GLIBC_/GLIBC_/' | sed 's/).*//' | sort -V | tail -1)
            echo "  Max GLIBC: $GLIBC_MAX"
            
            GLIBC_MAJOR=$(echo $GLIBC_MAX | cut -d'_' -f2 | cut -d'.' -f1)
            GLIBC_MINOR=$(echo $GLIBC_MAX | cut -d'_' -f2 | cut -d'.' -f2)
            
            if [ "$GLIBC_MAJOR" -gt 2 ] || ([ "$GLIBC_MAJOR" -eq 2 ] && [ "$GLIBC_MINOR" -gt 17 ]); then
              echo "❌ ERROR: Bundled CLI requires $GLIBC_MAX"
              rm -rf "$TEMP_DIR"
              exit 1
            fi
            echo "  ✅ Bundled CLI OK"
          fi
          
          rm -rf "$TEMP_DIR"
          echo "✅ All binaries in wheel verified: compliant with manylinux2014 (GLIBC_2.17)"

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
          path: target/wheels/*.whl

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    needs: [create-release, build-wheels]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: wheels-*
          merge-multiple: true

      - name: List wheels
        run: ls -lh wheels/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheels/
          skip-existing: true

  # Publish to crates.io
  publish-crates-io:
    name: Publish to crates.io
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Verify version matches tag
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_VERSION="${{ needs.create-release.outputs.version }}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Cargo.toml version ($CARGO_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
          echo "Version verified: $CARGO_VERSION"

      - name: Publish workspace to crates.io
        run: cargo publish --workspace
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Update release with wheel assets
  upload-wheels-to-release:
    name: Upload Wheels to Release
    needs: [create-release, build-wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: wheels-*
          merge-multiple: true

      - name: Upload wheels to release
        uses: softprops/action-gh-release@v1
        with:
          files: wheels/*.whl
          tag_name: ${{ needs.create-release.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
